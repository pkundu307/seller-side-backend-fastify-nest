generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_BAOlRDb87PZw@ep-frosty-boat-a1w2k2yn-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  role       String     @default("user") // user, seller, admin
  image      String?
  name       String?
  createdAt  DateTime   @default(now())

  businesses Business[] // A user can own multiple businesses
  reviews    Review[]   // A user can write multiple reviews
}

model Business {
  id          Int        @id @default(autoincrement())
  name        String
  gstNumber   String     @unique
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  phone       String
  isVerified  Boolean    @default(false)
  ownerId Int
  owner   User       @relation(fields: [ownerId], references: [id])
  businessId  String?     @unique @default(uuid())
  products Product[]  // Products under this business
  reviews  Review[]   // Optional: can infer reviews through products
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  price       Float
  images      String[]
  isPublished Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  businessId Int
  business   Business     @relation(fields: [businessId], references: [id])

  categories Category[]   @relation("ProductCategories")
  variants   Variant[]
  reviews    Review[]
}

model Variant {
  id        Int      @id @default(autoincrement())
  size      String?
  color     String?
  price     Float
  stock     Int

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] @relation("ProductCategories")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?

  userId    Int
  productId Int
  businessId Int

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  business  Business @relation(fields: [businessId], references: [id])
}
