generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ADD THIS ENTIRE BLOCK TO YOUR SCHEMA ---

model CustomerUser {
  id         String       @id @default(uuid())
  email      String       @unique
  picture    String?
  name       String
  password   String?
  authSource AuthSource   @default(self)
  type       CustomerType @default(user)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  orders     Order[]      // Opposite relation field for Order.customerUser
  orderInitiates OrderInitiate[] // Opposite relation field for OrderInitiate.customerUser
  addresses  Address[]    // Opposite relation field for Address.customerUser
  cartItems       CartItem[] 
    reviews         Review[] // <-- ADD THIS LINE

}

enum AuthSource {
  self
  google
}

enum CustomerType {
  basic
  pro
  user
}

// --- END OF BLOCK TO ADD ---
model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  role       String     @default("user")
  image      String?
  name       String?
  createdAt  DateTime   @default(now())
  businesses Business[]
}
model Coupon {
  id                String    @id @default(uuid())
  code              String    @unique // The unique coupon code
  active            Boolean   @default(true) // Whether the coupon is active or not

  // A coupon can discount by a percentage OR a fixed amount.
  // Making them optional allows for flexibility.
  valueByPercentage Decimal?  // Stored as Decimal for precision
  valueByAmount     Decimal?  // Stored as Decimal for financial accuracy

  expiresAt         DateTime  // The date the coupon is no longer valid

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Address {
  id           String @id @default(uuid())
  street       String
  city         String
  state        String
  postalCode   String
  country      String

  // This creates the one-to-many relationship.
  // One CustomerUser can have many Address records.
  customerUserId String
  customerUser   CustomerUser @relation(fields: [customerUserId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model Business {
  id         String    @id @default(uuid())
  name       String
  gstNumber  String    @unique
  address    String
  city       String
  state      String
  country    String
  postalCode String
  phone      String
  ownerId    String
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  owner      User      @relation(fields: [ownerId], references: [id])
  products   Product[]
  reviews    Review[]
}
//=================================================
//  ORDER AND RELATED MODELS
//=================================================

// This is the main Order model
model Order {
  id                      String         @id @default(uuid())
  totalAmount             Decimal // Use Decimal for money to avoid floating point errors
  
  // Relation to the customer who placed the order
  customerUserId          String
  customerUser            CustomerUser   @relation(fields: [customerUserId], references: [id])

  // Payment Details
  paymentMethod           PaymentMethod
  paymentStatus           PaymentStatus  @default(pending)

  // Order Status
  status                  OrderStatus    @default(pending)
  
  // Address is stored as a JSON blob. This is a snapshot of the address
  // at the time of the order, so it won't change if the user updates their profile.
  selectedAddress         Json

  // Optional Fields
  discount                Decimal        @default(0)
  taxAmount               Decimal        @default(0)
  shippingFee             Decimal        @default(0)
  trackingNumber          String?
  estimatedDeliveryDate   DateTime?
  cancellationReason      String?

  // An order can have many items. This links to the OrderItem table.
  items                   OrderItem[]

  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}


// This is the "join table" connecting Orders and Products.
// It also holds information specific to that item in that order.
model OrderItem {
  id                      String    @id @default(uuid())
  quantity                Int
  priceAtTimeOfOrder      Decimal   // Good practice to store the price, as product price might change later

  // --- NEW FEATURES ADDED HERE ---
  note                    String?   // Optional note for this specific item in the order.
  customizationImage      String?   // URL for the uploaded image if the product is customizable.

  // Relation to the specific Order
  orderId                 String
  order                   Order     @relation(fields: [orderId], references: [id])

  // Relation to the specific Product
  productId               String
  product                 Product   @relation(fields: [productId], references: [id])
}


// --- ENUMS for the Order model ---

enum PaymentMethod {
  online
  cash_on_delivery
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

model CartItem {
  id             String       @id @default(uuid())
  quantity       Int

  // Relation to the Product being added to the cart
  productId      String
  product        Product      @relation(fields: [productId], references: [id])

  // Relation to the Customer whose cart this is
  customerUserId String
  customerUser   CustomerUser @relation(fields: [customerUserId], references: [id])

  // This is a crucial constraint: it ensures that a user can only have
  // ONE cart entry for any given product. Prevents duplicate rows.
  @@unique([customerUserId, productId])
}
model Product {
  id                     String             @id @default(uuid())
  title                  String
  description            String
  price                  Float
  isCustomizable         Boolean            @default(false) // <-- ADD THIS LINE
  images                 String[]
  isPublished            Boolean?           @default(false)
  isFeatured             Boolean?           @default(false)
  slug                   String             @unique
  createdAt              DateTime?          @default(now())
  updatedAt              DateTime?          @updatedAt
  businessId             String
  cess                   String?            @db.VarChar(128)
    attributeValues ProductAttributeValue[]
  closingStock           Decimal?
  conversionRate         Decimal?
  discountAmount         Decimal?
  discountPercent        Decimal?
  hsnCode                String?            @db.VarChar(128)
  isBatchingEnabled      Boolean?
  isMinStockAlertEnabled Boolean?
  isMrpEnabled           Boolean?
  isSecondUnitEnabled    Boolean?
  isSerializationEnabled Boolean?
  isWholesaleEnabled     Boolean?
  itemBatchingId         String?
  itemCategory           String
  itemCode               String?            @db.VarChar(128)
  itemDescription        String?
  itemImage              String?
  itemSerialisationId    String?
  itemType               String?            @db.VarChar(128)
  itemUnitId             String?
  minStockCount          Decimal?
  mrp                    Decimal?
  openingStock           Decimal?
  openingStockDate       DateTime?
  purchasePrice          Decimal?
  purchasePriceType      String?            @db.VarChar(64)
  sacCode                String?            @db.VarChar(128)
  secondUnit             String?            @db.VarChar(128)
  sellingPrice           Decimal?
  sellingPriceType       String?            @db.VarChar(64)
  serialNoLabel          String?
  tax                    String?            @db.VarChar(128)
  unit                   String?            @db.VarChar(128)
  wholesalePrice         Decimal?
  wholesalePriceType     String?            @db.VarChar(64)
  wholesaleQuantity      Int?
  business               Business           @relation(fields: [businessId], references: [id])
  itemBatching           ItemBatching?      @relation(fields: [itemBatchingId], references: [id])
  itemSerialisation      ItemSerialisation? @relation(fields: [itemSerialisationId], references: [id])
  itemUnit               ItemUnit?          @relation(fields: [itemUnitId], references: [id])
  reviews                Review[]
  variants               Variant[]
  cartItems              CartItem[]         // <-- Added opposite relation for CartItem
  orderItems             OrderItem[]        // <-- Added opposite relation for OrderItem
}

model Variant {
  id        String  @id @default(uuid())
  size      String?
  color     String?
  price     Float
  stock     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
}


model Category {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  parentId  Int?
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parent")
  children  Category[] @relation("SubCategories")
  
  // --- ADD THESE LINES ---
  // A category can have many defined attribute types
  attributes Attribute[]
  
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@map("category")
}

model Attribute {
  id          Int      @id @default(autoincrement())
  name        String   // e.g., "Size"
  
  // An attribute belongs to a specific category
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  
  // This attribute can have many different values across many products
  productValues ProductAttributeValue[]

  // Ensure that an attribute name is unique within a given category
  @@unique([name, categoryId])
}


// Stores the actual value of a specific attribute for a specific product
// e.g., Product XYZ's "Size" is "XL"
model ProductAttributeValue {
  id         Int      @id @default(autoincrement())
  value      String   // e.g., "XL", "Red", "Cotton", "iPhone 15 Pro"
  
  // Links this value back to a specific product
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  
  // Links this value back to a specific attribute type
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id])

  // A product can only have one value for a given attribute type
  // (e.g., a shirt can't be both "XL" and "L" at the same time)
  @@unique([productId, attributeId])
}
model OrderInitiate {
  id        String   @id @default(uuid())
  order_id  String   // This likely holds an external ID from a payment gateway like Razorpay or Stripe
  status    OrderInitiateStatus @default(pending)

  // Relation to the customer who initiated the order
  customerUserId String
  customerUser   CustomerUser @relation(fields: [customerUserId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderInitiateStatus {
  pending
  completed
}
// This is the new, correct model
model Review {
  id             String       @id @default(uuid())
  rating         Int
  comment        String?
  productId      String
  createdAt      DateTime     @default(now())
  businessId     String
  
  // --- This is the corrected relationship ---
  customerUserId String
  customerUser   CustomerUser @relation(fields: [customerUserId], references: [id])
  
  // --- These relationships are correct ---
  business       Business     @relation(fields: [businessId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])
}

model CustomField {
  id        String   @id @default(uuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  saleId    String?  @unique
  sale      Sale?    @relation(fields: [saleId], references: [id])
}

model Sale {
  id                        String                 @id @default(uuid())
  businessId                String
  partyId                   String
  saleType                  String                 @db.VarChar(128)
  invoicePrefix             String                 @db.VarChar(128)
  invoiceNo                 Int
  invoiceDate               DateTime
  isDueDateEnabled          Boolean
  dueDate                   DateTime
  paymentTerm               Int
  partyType                 String                 @db.VarChar(128)
  partyName                 String                 @db.VarChar(256)
  businessName              String                 @db.VarChar(256)
  billingAddress            String
  shippingAddress           String
  placeOfSupply             String                 @db.VarChar(128)
  phoneNo                   String                 @db.VarChar(36)
  taxId                     String                 @db.VarChar(128)
  panNo                     String                 @db.VarChar(128)
  isDiscountAfterTaxEnabled Boolean
  discountPercent           Decimal
  discountAmount            Decimal
  totalTaxableAmount        Decimal
  totalTaxAmount            Decimal
  isAutoRoundoffEnabled     Boolean
  roundoffType              String                 @db.VarChar(64)
  roundoffAmount            Decimal
  totalAmount               Decimal
  isSettled                 Boolean
  balanceAmount             Decimal
  termCondition             String
  notes                     String
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  isScanItemEnabled         Boolean
  isConverted               Boolean
  party                     String
  customField               CustomField?
  saleAdditionalCharges     SaleAdditionalCharge[]
  saleItems                 SaleItem[]
  salePaymentModes          SalePaymentMode[]
  saleTaxes                 SaleTax[]
}

model SaleItem {
  saleItemId             String   @id @default(uuid())
  itemId                 String
  itemName               String   @db.VarChar(512)
  itemDescription        String
  hsnCode                String   @db.VarChar(128)
  sacCode                String   @db.VarChar(128)
  batchNo                String   @db.VarChar(128)
  manufactureDate        DateTime
  expiryDate             DateTime
  quantity               Decimal
  price                  Decimal
  priceType              String   @db.VarChar(64)
  unit                   String   @db.VarChar(128)
  discountPercent        Decimal
  discountAmount         Decimal
  taxableAmount          Decimal
  tax                    String   @db.VarChar(128)
  taxAmount              Decimal
  cess                   String   @db.VarChar(128)
  cessAmount             Decimal
  amount                 Decimal
  isMrpEnabled           Boolean
  isWholesaleEnabled     Boolean
  isSerialisationEnabled Boolean
  isBatchingEnabled      Boolean
  sellingPrice           Decimal
  sellingPriceType       String   @db.VarChar(64)
  purchasePrice          Decimal
  purchasePriceType      String   @db.VarChar(64)
  mrp                    Decimal
  wholesalePrice         Decimal
  wholesalePriceType     String   @db.VarChar(64)
  wholesaleQuantity      Decimal
  itemCode               String   @db.VarChar(128)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  saleId                 String
  sale                   Sale     @relation(fields: [saleId], references: [id])
}

model SaleAdditionalCharge {
  saleAdditionalChargeId String   @id @default(uuid())
  name                   String   @db.VarChar(256)
  amount                 Decimal
  tax                    String   @db.VarChar(128)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  saleId                 String
  sale                   Sale     @relation(fields: [saleId], references: [id])
}

model SalePaymentMode {
  salePaymentModeId String   @id @default(uuid())
  bankCashChequeId  String
  accountName       String   @db.VarChar(256)
  paymentMode       String   @db.VarChar(128)
  amount            Decimal
  ifsc              String   @db.VarChar(20)
  acNo              String   @db.VarChar(20)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  saleId            String
  sale              Sale     @relation(fields: [saleId], references: [id])
}

model SaleTax {
  saleTaxId     String   @id @default(uuid())
  taxRate       Decimal
  taxableAmount Decimal
  cgst          Decimal
  sgst          Decimal
  igst          Decimal
  cess          Decimal
  total         Decimal
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hsnCode       String   @db.VarChar(128)
  sacCode       String   @db.VarChar(128)
  saleId        String
  sale          Sale     @relation(fields: [saleId], references: [id])
}

model ItemBatching {
  id                  String    @id @default(uuid()) @map("item_batching_id")
  batchNo             String    @db.VarChar(128)
  manufactureDate     DateTime
  expiryDate          DateTime
  sellingPrice        Decimal
  sellingPriceType    String    @db.VarChar(64)
  purchasePrice       Decimal
  purchasePriceType   String    @db.VarChar(64)
  mrp                 Decimal
  unit                String    @db.VarChar(128)
  isSecondUnitEnabled Boolean
  secondUnit          String    @db.VarChar(128)
  conversionRate      Decimal
  openingStock        Decimal
  openingStockDate    DateTime
  closingStock        Decimal
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  products            Product[]
}

model ItemSerialisation {
  id           String    @id @default(uuid()) @map("item_serialisation_id")
  serialNo     String    @db.VarChar(128)
  serialNoDate DateTime
  isAvailable  Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
}

model ItemUnit {
  id         String    @id @default(uuid())
  businessId String
  unitName   String    @db.VarChar(128)
  isEnabled  Boolean
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
}

model StockActivity {
  id            String   @id @default(uuid())
  businessId    String
  itemId        String
  activityType  String   @db.VarChar(128)
  invoicePrefix String   @db.VarChar(128)
  invoiceNo     Int
  quantity      Decimal
  closingStock  Decimal
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

